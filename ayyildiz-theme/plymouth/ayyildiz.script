# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Set Background Color
Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

# Tinted text #ffffff
Window.Secolour.red = 1.0;
tinted_text_colour.green = 1.0;
tinted_text_colour.blue = 1.0;
# Define variables
star_count = 5;
frame_size = 6;
frame_duration = 7;
star_type_max = 1;

# logo logo
logo.image = Image("logo.png");
logo.sprite = Sprite(logo.image);
	
# Pardus Logo set position to center
logo.x = (Window.GetWidth()/2) - (logo.image.GetWidth()  / 2);
logo.y = (Window.GetHeight()/2) - (logo.image.GetHeight() / 2);
logo.sprite.SetPosition(logo.x, logo.y, 201);

# botton logo logo
logo_bottom.image = Image("logo_bottom.png");
logo_bottom.sprite = Sprite(logo_bottom.image);
	
# Pardus Logo set position to center
logo_bottom.x = (Window.GetWidth()/2) - (logo.image.GetWidth()  / 2);
logo_bottom.y = (Window.GetHeight()*87/100);# - (logo.image.GetHeight() / 2);
logo_bottom.sprite.SetPosition(logo_bottom.x, logo_bottom.y, 201);

# Background Image
bg.image = Image("background.png");
bg.image = bg.image.Scale(Window.GetWidth(), Window.GetHeight());
bg.sprite = Sprite(bg.image);
bg.x = 0;
bg.y = 0;
bg.z = 100;
bg.sprite.SetPosition(bg.x, bg.y, bg.z);

# Create stars
for (i = 0; i < star_count ; i++){
    star[i].image = Image("logo.png");
    star[i].sprite = Sprite(star[i].image);
    star[i].x = Math.Random()*Window.GetWidth();
    star[i].y = Math.Random()*Window.GetHeight();
    star[i].type = Math.Int(star_type_max*Math.Random());
    star[i].cur = Math.Int(Math.Random()*frame_size*frame_duration);
    star[i].sprite.SetPosition(0, 0, 200);
}
#----------------------------------------- Boot --------------------------------

fun main(){
    for (i = 0; i < star_count ; i++){
        star[i].cur += 1;
        if(star[i].cur >= frame_size*frame_duration){
            star[i].cur = 1;
        }
        star[i].image = Image("star_"+star[i].type+"_"+Math.Int(star[i].cur/frame_duration)+".png");
        star[i].sprite = Sprite(star[i].image);
        if(star[i].cur == 1){
            star[i].x = Math.Random()*Window.GetWidth();
            star[i].y = Math.Random()*Window.GetHeight();
            star[i].type = Math.Int(star_type_max*Math.Random());
        }
        star[i].sprite.SetPosition(star[i].x, star[i].y, 200);
    }        
}

Plymouth.SetRefreshFunction(main);


#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;

    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");

    box.sprite = Sprite(box.image);
    box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);

    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);

    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);

    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }

fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);


#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(Window.GetX() + 10, Window.GetY() + 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);
